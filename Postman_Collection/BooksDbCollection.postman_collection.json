{
	"info": {
		"_postman_id": "bbdd84c4-1116-45b1-8186-2c9945d0823c",
		"name": "BooksDbCollection",
		"description": "# Introduction\nWhat does your API do?\n\n# Overview\nThings that the developers should know about\n\n# Authentication\nWhat is the preferred way of using the API?\n\n# Error Codes\nWhat errors and status codes can a user expect?\n\n# Rate limit\nIs there a limit to the number of requests an user can send?",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "getBooks",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d2c73cd0-b1df-4ea9-a605-e65a58c481f3",
						"exec": [
							"pm.test('should return status code of 200', function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "!Chipmill1983",
							"type": "string"
						},
						{
							"key": "username",
							"value": "eyongegbe",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/posts",
					"host": [
						"{{url}}"
					],
					"path": [
						"posts"
					]
				},
				"description": "This request gets all available posts(books) in our server"
			},
			"response": []
		},
		{
			"name": "createBooks",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6dccb98a-99b1-4907-ac67-a20da5c450cc",
						"exec": [
							"\r",
							"var currentId = pm.environment.get(\"newPostId\");\r",
							"\r",
							"pm.test('should return correct status response', function(){\r",
							"    pm.expect(pm.response.to.have.status(201));\r",
							"})\r",
							"\r",
							"pm.test('should contain correct content', function(){\r",
							"    //caputures response here\r",
							"    var jsonData = pm.response.json()\r",
							"    //verifies content in response\r",
							"    pm.expect(jsonData.id).to.eql(currentId);\r",
							"    pm.expect(jsonData.title).to.eql(\"The Audacity of Hope\");\r",
							"    pm.expect(jsonData.author).to.eql(\"Barack Obama\");\r",
							"\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "e6e40d19-f468-491d-b569-ea6db9bf8253",
						"exec": [
							"function randomNumber(min, max){\r",
							"    return Math.floor(Math.random() * (max-min) + min);\r",
							"}\r",
							"var newPostId = randomNumber(20, 30);\r",
							"pm.environment.set(\"newPostId\", newPostId)\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "  {\r\n    \"id\": {{newPostId}},\r\n    \"title\": \"The Audacity of Hope\",\r\n    \"author\": \"Barack Obama\"\r\n  }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/posts",
					"host": [
						"{{url}}"
					],
					"path": [
						"posts"
					]
				},
				"description": "This request verifies post(books) record creation"
			},
			"response": []
		},
		{
			"name": "getSpecificBook",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ab6fc36c-0712-4f55-a699-0debc158ee70",
						"exec": [
							"var currentId = pm.environment.get(\"newPostId\");\r",
							"\r",
							"pm.test('should return current Id', function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(currentId);\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "!Chipmill1983",
							"type": "string"
						},
						{
							"key": "username",
							"value": "eyongegbe",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/posts/{{newPostId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"posts",
						"{{newPostId}}"
					]
				},
				"description": "This request gets all available posts(books) in our server"
			},
			"response": []
		},
		{
			"name": "updateBook",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b8a99ad0-b696-457e-8c7e-c7c2a6fa7554",
						"exec": [
							"var newPostId = pm.environment.get(\"newPostId\")\r",
							"\r",
							"pm.test('should be updated successfully', function(){\r",
							"    //caputures response here\r",
							"    var jsonData = pm.response.json()\r",
							"    //verifies content in response\r",
							"    pm.expect(jsonData.id).to.eql(newPostId)\r",
							"    pm.expect(jsonData.title).to.eql(\"To Kill a Mockingbird\");\r",
							"\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "  {\r\n    \"id\": {{newPostId}},\r\n    \"title\": \"To Kill a Mockingbird\",\r\n    \"author\": \"Barack Obama\"\r\n  }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/posts/{{newPostId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"posts",
						"{{newPostId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "updateSingleField",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4a306730-37b0-4339-a8bc-790653428134",
						"exec": [
							"pm.test('should be updated successfully', function(){\r",
							"    //caputures response here\r",
							"    var jsonData = pm.response.json()\r",
							"    //verifies content in response\r",
							"    pm.expect(jsonData.author).to.eql(\"Harper Lee\");\r",
							"\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"author\": \"Harper Lee\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/posts/{{newPostId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"posts",
						"{{newPostId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "deleteRecord",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e427679b-4d5a-4e4e-9b1a-50b8c4444dc2",
						"exec": [
							"pm.test('should return status code of 200', function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/posts/{{newPostId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"posts",
						"{{newPostId}}"
					]
				},
				"description": "This verifies we can delete the record from the server"
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}